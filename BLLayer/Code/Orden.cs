
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using DALayer;
using System.Collections.Generic;
using MyGeneration.dOOdads;
using System.Data;

namespace BLLayer
{
	public class Orden : _Orden
	{
		public Orden()
		{
		
		}
        public int Insert(int id_usuario, int id_tipo_entrega, string direccion_entrega, string comentario, string telefono, string email, string destinatario) 
        {
            this.AddNew();
            this.Id_usuario = id_usuario;
            this.Id_estado=1;  //El estado por defecto es el 1, es decir, por procesar
            if (id_tipo_entrega > 0)
                this.Id_tipo_entrega = id_tipo_entrega;
            this.No_orden = 1;
            this.Id_proveedor = 1; //Por defecto es 1, es decir, CUBAPACK
            this.Id_distribuidor = 1; //Por defecto es 1, es decir, CUBAPACK
            this.Fecha = System.DateTime.Now;
            this.Direccion_entrega = direccion_entrega;
            this.Comentario = comentario;
            this.Telefono = telefono;
            this.Email_notificacion = email;
            this.Destinatario = destinatario;
            this.Save();
            this.No_orden = this.Id_orden;
            this.Save();            
            return this.Id_orden;  
        }
        public void ModificaEstado(int id_orden, int id_estado) 
        {
            this.LoadByPrimaryKey(id_orden);
            this.Id_estado = id_estado;
            this.Save();
        }
        public void Delete(int id_orden) 
        {
            Producto_Orden po = new Producto_Orden();
            po.Delete(id_orden);
            this.LoadByPrimaryKey(id_orden);
            this.MarkAsDeleted();
            this.Save();
        }
        public void LoadByNoOrden(int no_orden) 
        {
            this.Where.WhereClauseReset();
            this.Where.No_orden.Value = no_orden;
            this.Where.No_orden.Operator = MyGeneration.dOOdads.WhereParameter.Operand.Equal;
            this.Query.Load();
            this.Rewind();
        }
        public void LoadByUsuario(int id_usuario)
        {
            this.Where.WhereClauseReset();
            this.Where.Id_usuario.Value = id_usuario;
            this.Where.Id_usuario.Operator = MyGeneration.dOOdads.WhereParameter.Operand.Equal;
            this.Query.AddOrderBy(Orden.ColumnNames.Fecha, WhereParameter.Dir.DESC);            
            this.Query.Load();
            this.Rewind();
        }

        public void Filtrar(int code, int no_orden, string login, int id_estado, DateTime f_antes, DateTime f_despues)
        {
            if (code > 15)
                LoadByNoOrden(no_orden);
            else
            {
                this.Where.WhereClauseReset();
                int r = code % 4;
                code /= 4;
                bool almenosuna = false;
                // Seccion despues
                if (r == 1)
                {
                    almenosuna = true;
                    this.Where.Fecha.Value = f_despues;
                    this.Where.Fecha.Operator = WhereParameter.Operand.GreaterThanOrEqual;
                }                
                // Seccion Antes
                else if (r == 2)
                {                    
                    almenosuna = true;
                    this.Where.Fecha.Value = f_antes;
                    this.Where.Fecha.Operator = WhereParameter.Operand.LessThanOrEqual;
                }
                // Seccion Between 
                else if (r == 3)
                {
                    almenosuna = true;
                    this.Where.Fecha.BetweenBeginValue = f_despues;
                    this.Where.Fecha.BetweenEndValue = f_antes.AddDays(1);
                    this.Where.Fecha.Operator = WhereParameter.Operand.Between;
                }                
                r = code % 2;
                code /= 2;
                if (r == 1)
                {
                    if (almenosuna)
                        this.Where.Id_estado.Conjuction = WhereParameter.Conj.And;
                    else
                        almenosuna = true;
                    this.Where.Id_estado.Value = id_estado;
                    this.Where.Id_estado.Operator = WhereParameter.Operand.Equal;
                }
                r = code % 2;
                code /= 2;
                if (r == 1)
                {
                    Usuario u = new Usuario();
                    u.LoadByLogin(login);
                    if (almenosuna)
                        this.Where.Id_usuario.Conjuction = WhereParameter.Conj.And;
                    this.Where.Id_usuario.Value = u.Id_usuario;
                    this.Where.Id_usuario.Operator = WhereParameter.Operand.Equal;
                }
                this.Query.Load();
            }
        }
        public void Filtrar(int code, int no_orden, string login, int id_estado, int d_antes, int m_antes, int y_antes, int d_desp, int m_desp, int y_desp)
        {
            Filtrar(code, no_orden, login, id_estado, new DateTime(y_antes, m_antes, d_antes), new DateTime(y_desp, m_desp, d_desp));
        }
	}
}
